<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_person_forward</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>spr_person_collision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
hsp = 0;
vsp = 0;
movespeed = 1 ; //5;

hdir = 0;
vdir = 1;

walkframerate = 5/60;
image_speed = walkframerate;
//image_blend = make_colour_hsv(255, 255, 0 );

pause = false;
daysNeeded = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get player's input
key_right = max(keyboard_check(vk_right), keyboard_check(ord("D")),0);
key_left = -max(keyboard_check(vk_left), keyboard_check(ord("A")),0);
key_up = -max(keyboard_check(vk_up), keyboard_check(ord("W")),0);
key_down = max(keyboard_check(vk_down), keyboard_check(ord("S")),0);



//react to input
moveHor = key_right + key_left;
moveVer = key_up + key_down;
hsp = moveHor*movespeed;
vsp = moveVer*movespeed;

//standing still
if (hsp == 0 &amp;&amp; vsp == 0){
    if (hdir != 0){
        sprite_index = spr_person_side;
        image_xscale = hdir;
    }
    
    if (vdir &lt; 0){
        sprite_index = spr_person_backward;
    }
    
    if(vdir &gt; 0){
        sprite_index = spr_person_forward;
    }

}

//moving
else{


    if( moveHor != 0 ){
        sprite_index = spr_person_side_walk;
        image_xscale = key_right+key_left;
        //image_speed = walkframerate;
    }
    if ( moveVer &lt; 0 ){
        sprite_index = spr_person_backward_walk;
        //image_speed = walkframerate;
    }
    if( moveVer &gt; 0 ){
        sprite_index = spr_person_forward_walk;
        //image_speed = walkframerate; 
    }

}


//vertical collision
if (place_meeting(x, y + vsp, obj_wall) ){
    while( !place_meeting(x, y+sign(vsp), obj_wall) ){
        y += sign(vsp);
    }
    vsp = 0;
}


//horizontal collision
if (place_meeting(x+hsp, y, obj_wall) ){
    while( !place_meeting(x+sign(hsp), y, obj_wall) ){
        x += sign(hsp);
    }
    hsp = 0;
}



hdir = moveHor;
vdir = moveVer;

if (!pause){
    x += hsp;
    y += vsp;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
